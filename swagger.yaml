openapi: 3.0.3
info:
  title: Metatavu Home lambdas
  description: Metatavu Home lambdas
  version: 1.0.0

security:
  - bearerAuth: []

paths:
  "/slack-avatar":
    get:
      operationId: slackAvatar
      summary: Lists users avatars
      description: |
        Lists users avatars
      tags:
        - Slack avatars
      responses:
        "200":
          description: A list of images for forecast users
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users-avatars"

  "/salesLeads":
    get:
      operationId: listSalesLeads
      summary: Lists all Leads from Pipedrive
      description: |
        Lists Leads from Pipedrive
      tags:
        - Leads
      responses:
        "200":
          description: Lists Leads from Pipedrive
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lead"

  "/salesDeals/{status}":
    get:
      operationId: listSalesDeals
      summary: Lists all Deals from Pipedrive
      description: |
        Lists open Deals from Pipedrive
      tags:
        - Deals
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
          description: Pipedrive Deal status
      responses:
        "200":
          description: Lists Deals from Pipedrive
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deal"

  "/getLeadById/{leadId}":
    get:
      operationId: getLeadById
      summary: List lead data by id from Pipedrive
      tags:
        - LeadById
      description: |
        Get more data of a lead by id from Pipedrive
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: Lead Id used to identify a pipedrive lead
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Lead"

  "/getDealById/{dealId}":
    get:
      operationId: getDealById
      summary: List deal data by id from Pipedrive
      tags:
        - DealById
      description: |
        Get more data of a deal by id from Pipedrive
      parameters:
        - name: dealId
          in: path
          required: true
          schema:
            type: integer
          description: Deal Id used to identify a pipedrive deal
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Deal"

  "/addDealInterest/{dealId}":
    put:
      summary: Add interest to a Pipedrive deal
      description: |
        Updates string where deal interests are stored in Pipedrive
      tags:
        - Interest
      parameters:
        - name: dealId
          in: path
          required: true
          schema:
            type: integer
          description: Deal Id used to identify a deal where the interest is updated
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interest"

  "/addLeadInterest/{leadId}":
    patch:
      summary: Add interest to a Pipedrive lead
      description: |
        Updates string where lead interests are stored in Pipedrive
      tags:
        - Interest
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: LeadId used to identify a lead where the interest is updated
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interest"

  "/removeDealInterest/{dealId}":
    put:
      summary: Remove interest to a Pipedrive deal
      description: |
        Updates string where intrests are stored in Pipedrive
      tags:
        - Interest
      parameters:
        - name: dealId 
          in: path
          required: true
          schema:
            type: integer
          description: Deal Id used to identify a deal where the interest is updated
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interest"

  "/removeLeadInterest/{leadId}":
    patch:
      summary: Remove interest to a Pipedrive lead
      description: |
        Updates string where intrests are stored in Pipedrive
      tags:
        - Interest
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: LeadId used to identify a lead where the interest is updated
      responses:
        "200":
          description: Successful operation
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interest"

  "/on-call":
    get:
      operationId: listOnCallData
      summary: Lists on call personnel data from S3
      description: Lists on call personnel data from S3
      tags:
        - On call
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: string
          description: Selected year for on call entries
      responses:
        "200":
          description: A list of on call personnel for a selected year
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OnCall"
        default:
          description: Invalid or missing year

  "/update-paid":
    post:
      operationId: updatePaid
      summary: Updates payment status for an on call period
      description: Updates payment status for an on call period
      tags:
        - On call
      requestBody:
        description: On-call week status to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnCallPaid"
      responses:
        "200":
          description: Paid status updated

  "/software":
    get:
      operationId: listSoftware
      summary: Get all software entries
      description: Retrieve a list of all software entries in the registry.
      tags:
        - Software
      responses:
        "200":
          description: A list of software entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SoftwareRegistry"

    post:
      operationId: createSoftware
      summary: Register new software
      description: Register a new software entry in the registry.
      tags:
        - Software
      requestBody:
        description: Software entry to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareRegistry"
      responses:
        "201":
          description: Software entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareRegistry"
        "default":
          description: Bad request, software entry already exists or invalid data

  "/software/{id}":
    get:
      operationId: getSoftwareById
      summary: Get software by ID
      description: Retrieve a software entry by its unique identifier.
      tags:
        - Software
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the software entry to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Software entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareRegistry"
        "default":
          description: Software entry not found
          
    put:
      operationId: updateSoftwareById
      summary: Update software entry
      description: Update an existing software entry in the registry.
      tags:
        - Software
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the software entry to update
          schema:
            type: string
      requestBody:
        description: Updated software entry
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SoftwareRegistry"
      responses:
        "200":
          description: Software entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SoftwareRegistry"
        "default":
          description: Bad request, invalid data

    delete:
      operationId: deleteSoftwareById
      summary: Delete software entry
      description: Delete a software entry from the registry.
      tags:
        - Software
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the software entry to delete
          schema:
            type: string
      responses:
        "204":
          description: Software entry deleted successfully
        "default":
          description: Software entry not found

  "/users":
    get:
      operationId: listUsers
      summary: Get list of keycloak users.
      description: Get list of keycloak users.
      tags:
        - Users
      responses:
        "200":
          description: Get list of keycloak users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "default":
          description: Invalid request was sent to the server.

  "/users/{userId}":
    get:
      operationId: findUser
      summary: Find user by keycloak id
      description: Finds user by keycloak id in keycloak.
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: Users ID in Keycloak
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found User information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "default":
          description: Invalid request was sent to the server.

  "/questionnaires":
    get:
      operationId: listQuestionnaires
      summary: List questionnaires
      description: Retrieve a list of all questionnaires in the registry.
      tags:
        - Questionnaires
      responses:
        "200":
          description: A list of questionnaires
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Questionnaire"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      operationId: createQuestionnaires
      summary: Register new questionnaire
      description: Register a new questionnaire in the registry.
      tags:
        - Questionnaires
      requestBody:
        description: Questionnaire entry to register
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Questionnaire"
      responses:
        "201":
          description: Questionnaire entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Questionnaire"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/questionnaires/{id}":
    get:
      operationId: getQuestionnairesById
      summary: Get questionnaire by ID
      description: Retrieve a questionnaire entry by its unique identifier.
      tags:
        - Questionnaires
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the questionnaire entry to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Questionnaire entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Questionnaire"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      operationId: updateQuestionnaires
      summary: Update questionnaire entry
      description: Update an existing questionnaire entry in the registry.
      tags:
        - Questionnaires
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the questionnaire entry to update
          schema:
            type: string
      requestBody:
        description: Updated questionnaire entry
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Questionnaire"
      responses:
        "200":
          description: Questionnaire entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Questionnaire"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteQuestionnaires
      summary: Delete questionnaire entry
      description: Delete a questionnaire entry from the registry.
      tags:
        - Questionnaires
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the questionnaire entry to delete
          schema:
            type: string
      responses:
        "204":
          description: Empty response indicating successful removal.
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/severa/users/{severaUserId}/flextime":
    get:
      operationId: getFlextimeBySeveraUserId
      summary: Get the flextime balance for a user.
      description: Retrieve the flextime balances for a user based on their SeveraUserId.
      tags:
        - FlexTime
      parameters:
        - name: severaUserId
          in: path
          required: true
          description: severaId of the user.
          schema:
            type: string
      responses:
        "200":
          description: Flextime entry retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flextime"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/severa/projects/{severaProjectId}/phases":
    get:
      operationId: getPhasesBySeveraProjectId
      summary: Get all the phases for project
      description: Retrieve all the phases for a particular project with given ID.
      tags:
        - Phases
      parameters:
        - name: severaProjectId
          in: path
          required: true
          description: ID of the project.
          schema:
            type: string
      responses:
        "200":
          description: A list of phases retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Phase"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Error"

  "/severa/users/{severaUserId}/resourceAllocations":
    get:
      operationId: getAllocationsBySeveraUserId
      summary: Get the resource allocations for a user.
      description: Retrieve the resource allocations for a user based on their SeveraUserId.
      tags:
        - ResourceAllocations
      parameters:
        - name: severaUserId
          in: path
          required: true
          description: severaId of the user.
          schema:
            type: string
      responses:
        "200":
          description: A list of resource allocations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceAllocations"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/severa/workHours":
    get:
      operationId: getAllWorkHours
      summary: Get all the work hours
      description: Retrieve all the work hours.
      tags:
        - WorkHours
      parameters:
        - name: severaUserId
          required: false
          in: query
          description: Filter work hours by users with unique severaUserId
          schema:
            type: string
        - name: severaProjectId
          required: false
          in: query
          description: Filter work hours by severaProjectId
          schema:
            type: string
        - name: severaPhaseId
          required: false
          in: query
          description: Filter work hours by severaPhaseId
          schema:
            type: string
        - name: startDate
          required: false
          in: query
          description: Filter work hours by startTime
          schema:
            type: string
            format: date-time
        - name: endDate
          required: false
          in: query
          description: Filter work hours by endTime
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: A list of all work hours
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WorkHours"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Error"

  "/vacationRequests":
    get:
      operationId: listVacationRequests
      summary: List vacation requests
      description: Lists persisted vacation requests
      tags:
        - VacationRequests
      parameters:
        - name: userId
          required: false
          in: query
          description: Filter by users unique ID
          schema:
            type: string
            format: uuid
        - name: before
          required: false
          in: query
          description: Retrieve vacation requests before given date.
          schema:
            type: string
            format: date
        - name: after
          required: false
          in: query
          description: Retrieve vacation requests after given date.
          schema:
            type: string
            format: date
        - name: draft
          required: false
          in: query
          description: Filter Vacation Requests by draft state
          schema:
            type: boolean
      responses:
        "200":
          description: List of vacation requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VacationRequest"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/Error"
    post:
      operationId: createVacationRequest
      summary: Post a new vacation request
      description: Add new vacation request
      tags:
        - VacationRequests
      requestBody:
        description: New vacation request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacationRequest"
      responses:
        "201":
          description: created new vacation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequest"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/vacationRequests/{id}":
    get:
      operationId: findVacationRequest
      summary: Finds vacation request
      description: Finds persisted vacation request
      tags:
        - VacationRequests
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found vacation request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequest"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateVacationRequest
      summary: Updates vacation request
      description: Update vacation request
      tags:
        - VacationRequests
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated vacation request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacationRequest"
      responses:
        "200":
          description: created new vacation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequest"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteVacationRequest
      summary: Delete a vacation request.
      description: Deletes a vacation request.
      tags:
        - VacationRequests
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  "/vacationRequests/{id}/statuses":
    get:
      operationId: listVacationRequestStatuses
      summary: List vacation requests statuses
      description: List vacation requests statuses
      tags:
        - VacationRequestStatus
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of vacation requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VacationRequestStatus"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createVacationRequestStatus
      summary: Post a new vacation request status
      description: Add new vacation request status
      tags:
        - VacationRequestStatus
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
      requestBody:
        description: New vacation request status
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacationRequestStatus"
      responses:
        "201":
          description: created new vacation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequestStatus"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/vacationRequests/{id}/statuses/{statusId}":
    get:
      operationId: findVacationRequestStatus
      summary: Finds vacation request status
      description: Finds persisted vacation request status
      tags:
        - VacationRequestStatus
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
        - name: statusId
          required: true
          in: path
          description: VacationRequestStatus id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found vacation request status.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequestStatus"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateVacationRequestStatus
      summary: Updates vacation request status
      description: Update vacation request status
      tags:
        - VacationRequestStatus
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequest id
          schema:
            type: string
            format: uuid
        - name: statusId
          required: true
          in: path
          description: VacationRequestStatus id
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated vacation request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacationRequestStatus"
      responses:
        "200":
          description: created new vacation request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationRequestStatus"
        "default":
          description: Invalid request was sent to the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteVacationRequestStatus
      summary: Delete a vacation request status.
      description: Deletes a vacation requests status.
      tags:
        - VacationRequestStatus
      parameters:
        - name: id
          required: true
          in: path
          description: VacationRequestStatus id
          schema:
            type: string
            format: uuid
        - name: statusId
          required: true
          in: path
          description: VacationRequestStatus id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/trello/card-comments":
    post:
      operationId: createComment
      summary: Add a comment to a Trello card
      description: Creates a new comment on a specified Trello card.
      tags:
        - Trello
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cardId:
                  type: string
                  description: The ID of the Trello card.
                comment:
                  type: string
                  description: The comment text.
      responses:
        "200":
          description: Comment created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardId:
                    type: string
                    description: The ID of the Trello card.
                  comment:
                    type: string
                    description: The comment text.
        "default":
          description: Failed to create comment.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/trello/cards":
    get:
      operationId: listCards
      summary: Get all Trello cards on a list
      description: Retrieves a list of cards and their comments from a specified Trello list.
      tags:
        - Trello
      responses:
        "200":
          description: List of Trello cards retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrelloCard"        
        "default":
          description: Failed to create card.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/trello/card":
    post:
      operationId: createCard
      summary: Create a new Trello card
      description: Adds a new card to a Trello board.
      tags:
        - Trello
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the Trello card.
                description:
                  type: string
                  description: Description of the Trello card.
      responses:
        "200":
          description: Trello card created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cardId:
                    type: string
                  title:
                    type: string
                  description:
                    type: string 
        "default":
          description: Failed to create card.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/trello/card/{id}":
    delete:
      operationId: deleteCard
      summary: Delete a Trello card by ID
      description: Deletes a Trello card identified by its unique ID.
      tags:
        - Trello
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Trello card deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "default":
          description: Failed to fetch cards.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/trello/board-members":
    get:
      operationId: getBoardMembersEmails
      summary: Get Trello board members' emails
      description: Retrieves the email addresses of Trello board members.
      tags:
        - Trello
      responses:
        "200":
          description: List of board members' emails retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TrelloMember"
        "default":
          description: Failed to fetch board members' emails.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/google-drive/memos":
    get:
      operationId: getMemos
      summary: List memos
      description: Retrieves the list of memos.
      tags:
        - Memo
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: List of memos retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/PdfFile"
        "default":
          description: Missing parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/google-drive/memo-content":
    get:
      operationId: getContentMemo
      summary: Get memo pdf content
      description: Retrieves pdf file content
      tags:
        - Memo
      parameters:
        - name: fileId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Memo PDF retrieved successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "default":
          description: File not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/google-drive/memo-summary":
    get:
      operationId: getSummaryMemo
      summary: Generate summary of a memo content
      description: Generates a summary of a memo content.
      tags:
        - Memo
      parameters:
        - name: fileId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Memo summary generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  en:
                    type: string
                  fi:
                    type: string
        "default":
          description: File not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/google-drive/memo-translate":
    get:
      operationId: getTranslatedMemoPdf
      summary: Get translated memo content
      description: Retrieves the translated content of a memo PDF.
      tags:
        - Memo
      parameters:
        - name: fileId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Translated memo content retrieved successfully.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "default":
          description: File not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message

    User:
      type: object
      description: User Data
      required:
        - id
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          description: User's ID in Keycloak.
        firstName:
          type: string
          description: User's first name.
        lastName:
          type: string
          description: User's last name.
        email:
          type: string
          description: User's email.
        attributes:
          $ref: "#/components/schemas/Attributes"

    Attributes:
      type: object
      description: User`s custom attributes
      properties:
        severaUserId:
          type: string
          description: User`s ID in Severa
        isActive:
          type: boolean
          description: Defining is user is active e.g. is employed.
        vacationDaysByYear:
          type: array
          items:
            type: string
            description: Year and vacation days in format "YYYY:DDD".
        unspentVacationDaysByYear:
          type: array
          items:
            type: string
            description: Year and unspent vacation days in format "YYYY:DDD".
        passedQuestionnaires:
          type: array
          items:
            type: string
        forecastId:
          type: integer
          format: int32
          description: User's ID in Forecast. Used for keeping a reference of Forecast based TimeEntries and Users.

    Users-avatars:
      type: object
      description: Users avatars data
      properties:
        personId:
          type: integer
        image_original:
          type: string

    Lead:
      type: object
      description: Lead data from Pipedrive API
      required:
        - leadId
        - title
        - interested
        - usedTech
        - addTime
        - updateTime
        - nextActivityDate
        - labelIds
      properties:
        leadId:
          type: string
          format: uuid
          description: LeadId is used to identify projects
        title:
          type: string
          description: Title or a Name of a Lead
        interested:
          type: string
          description: String where userIds are stored separated with semicolon.
        usedTech:
          type: string
          description: String where usedTech are stored separated with semicolon.
        addTime:
          type: string
          format: date-time
          description: Time when Lead is created or added to Pipedrive
        updateTime:
          type: string
          format: date-time
          description: Time when Lead is last updated to Pipedrive
        nextActivityDate:
          type: string
          format: date-time
          description: Time when next activity is going to happen on a Lead
        labelIds:
          type: array
          items:
            type: string
          description: String array where Lead labels are stored. labelIds are 'Hot', 'Warm' or 'Cold'

    Deal:
      type: object
      description: Deal data from Pipedrive API
      required:
        - dealId
        - title
        - interested
        - usedTech
        - value
        - currency
        - addTime
        - updateTime
        - nextActivityDate
        - nextActivitySubject
        - nextActivityNote
        - status
      properties:
        dealId:
          type: integer
          description: DealId is used to identify projects
        title:
          type: string
          description: Title or a Name of a Deal
        interested:
          type: string
          description: String where userIds are stored separated with semicolon.
        usedTech:
          type: string
          description: String where usedTech are stored separated with semicolon.
        value:
          type: number
          description: Value of a deal
        currency:
          type: string
          description: Currency that is used to tell the value of a deal
        addTime:
          type: string
          format: date-time
          description: Time when Deal is created or added to Pipedrive
        updateTime:
          type: string
          format: date-time
          description: Time when Deal is last updated to Pipedrive
        nextActivityDate:
          type: string
          format: date-time
          description: Time when next activity is going to happen on a Deal
        nextActivitySubject:
          type: string
          description: Used to tell the subject of a next activity.
        nextActivityNote:
          type: string
          description: Holds more information about the next activity.
        status:
          type: string
          description: Status of a Deal. Is the deal open, lost or won

    Interest:
      type: object
      description: Adding or removing interest to Pipedrive API
      required:
        - interest
      properties:
        interest:
          type: string
          description: String where userIds are stored separated with semicolon.

    OnCall:
      type: object
      description: On-call data from AWS S3
      required:
        - Person
        - Week
        - Paid
      properties:
        Person:
          type: string
          description: Name of a person on call
        Week:
          type: string
          description: On call week number.
        Paid:
          type: boolean
          description: Status of on call week payment.

    OnCallPaid:
      type: object
      description: On-call request body to update paid status.
      required:
        - year
        - week
        - paid
      properties:
        year:
          type: number
          description: Selected year of on call entries
        week:
          type: number
          description: Selected week of on call entries
        paid:
          type: boolean
          description: Status of on call week payment

    SoftwareStatus:
      type: string
      description: Status of the software entry
      enum:
        - PENDING
        - UNDER_REVIEW
        - ACCEPTED
        - DEPRECATED
        - DECLINED

    SoftwareRegistry:
      type: object
      required:
        - name
        - description
        - url
        - image
        - createdBy
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the software entry
        name:
          type: string
          description: Name of the software
        description:
          type: string
          description: Description of the software
        url:
          type: string
          format: uri
          description: URL to relevant information/marketing page
        image:
          type: string
          format: uri
          description: URL to the image of the software
        status:
          $ref: "#/components/schemas/SoftwareStatus"
        createdBy:
          type: string
          description: User who created the software entry
        createdAt:
          type: string
          format: date-time
          description: Date and time when the software entry was created
        lastUpdatedBy:
          type: string
          description: User who last updated the software entry
        lastUpdatedAt:
          type: string
          format: date-time
          description: Date and time when the software entry was last updated
        recommend:
          type: array
          items:
            type: string
          description: An array that stores the user IDs of individuals who the software is recommended to
        tags:
          type: array
          items:
            type: string
          description: An array that holds tags associated with the software for categorization
        users:
          type: array
          items:
            type: string
          description: An array that stores the user IDs of individuals who have added or are using the software

    Questionnaire:
      type: object
      required:
        - title
        - description
        - questions
        - passScore
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the questionnaire
        title:
          type: string
          description: Title of the questionnaire
        description:
          type: string
          description: Description of the questionnaire
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
          description: List of questions in the questionnaire
        tags:
          type: array
          items:
            type: string
          description: List of tags for the questionnaire
        passedUsers:
          type: array
          items:
            type: string
            format: uuid
          description: List of users who have passed the questionnaire
        passScore:
          type: integer
          description: Minimum score required to pass the questionnaire

    Question:
      type: object
      required:
        - questionText
        - answerOptions
      properties:
        questionText:
          type: string
          description: The question text
        answerOptions:
          type: array
          items:
            $ref: "#/components/schemas/AnswerOption"
          description: List of answer options available for the question

    AnswerOption:
      type: object
      required:
        - label
        - isCorrect
      properties:
        label:
          type: string
          description: Display text for the answer option
        isCorrect:
          type: boolean
          description: Indicates if this option is the correct answer

    VacationType:
      type: string
      description: Enum for vacation type
      enum:
        - VACATION

    VacationRequestStatuses:
      type: string
      description: Enum for vacation request status
      enum:
        - PENDING
        - APPROVED
        - DECLINED

    VacationRequest:
      type: object
      description: Person's single vacation request
      required:
        - userId
        - days
        - startDate
        - endDate
        - type
        - message
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: ID of vacation request in UUID
          default: null
        userId:
          type: string
          format: uuid
          description: User keycloak ID in UUID
        draft:
          type: boolean
          description: Draft state
        startDate:
          type: string
          format: date
          description: Date of vacation start
        endDate:
          type: string
          format: date
          description: Date of vacation end
        days:
          type: integer
          format: int32
          description: Vacation days used for requested vacation
        type:
          $ref: "#/components/schemas/VacationType"
          description: type of vacation request
        status:
          type: array
          items:
            $ref: "#/components/schemas/VacationRequestStatus"
            description: status of vacation request
        message:
          type: string
          description: Message attached to request
        createdBy:
          type: string
          format: uuid
          description: ID of person who created status in UUID
        createdAt:
          type: string
          format: date-time
          description: Date time of vacation request registration
        updatedAt:
          type: string
          format: date-time
          description: Date time of vacation request update

    VacationRequestStatus:
      type: object
      description: singular vacation request status
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/VacationRequestStatuses"
        message:
          type: string
          description: Date of vacation start
        createdBy:
          type: string
          format: uuid
          description: ID of person who created status in UUID
        updatedAt:
          type: string
          format: date-time
          description: Date time of status update

    Flextime:
      type: object
      properties:
        totalFlextimeBalance:
          type: number
          format: double
          nullable: true
        monthFlextimeBalance:
          type: number
          format: double
          nullable: true

    TrelloCard:
      type: object
      properties:
        cardId:
          type: string
          description: Unique identifier for the Trello card
        title:
          type: string
          description: Title of the Trello card
        description:
          type: string
          description: Detailed description of the Trello card
        assignedPersons:
          type: array
          items:
            type: string
          description: List of persons assigned to the Trello card
        comments:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Comment text
              createdBy:
                type: string
                description: Author of the comment
    
    TrelloMember:
      type: object
      properties:
        memberId:
          type: string
          description: Unique identifier for the Trello board member
        fullName:
          type: string
          description: Full name of the Trello board member
        email:
          type: string
          description: Email of the Trello board member
          
    PdfFile: 
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        content:
          type: string
          format: byte
          description: Base64-encoded PDF content 

    Phase:
      type: object
      properties:
        severaPhaseId:
          format: uuid
          type: string
        name:
          type: string
          nullable: true
        isCompleted:
          type: boolean
          default: false
        workHoursEstimate:
          type: number
          format: double
        startDate:
          type: string
          format: date
        deadLine:
          type: string
          format: date
        project:
          type: object
          description: A reference to Project in Phase Object
          properties:
            severaProjectId:
              format: uuid
              type: string
              description: Id of the project
            name:
              type: string
              description: Name of the project
            isClosed:
              type: boolean
              default: false
              description: Boolean value to indicate if the project has been closed or not

    ResourceAllocations:
      type: object
      properties:
        severaResourceAllocationId:
          format: uuid
          type: string
        allocationHours:
          type: number
          format: double
        calculatedAllocationHours:
          type: number
          format: double
        phase:
          type: object
          description: A reference to Phase Model in Resource Allocation Object
          properties:
            severaPhaseId:
              format: uuid
              type: string
              description: Id of the phase
            name:
              type: string
              description: Name of the phase
        user:
          type: object
          description: A reference to User Model in Resource Allocation Object
          properties:
            severaUserId:
              format: uuid
              type: string
              description: Id of the user
            name:
              type: string
              description: Name of the user
        project:
          type: object
          description: A reference to Project Model in Resource Allocation Object
          properties:
            severaProjectId:
              format: uuid
              type: string
            name:
              type: string
            isInternal:
              type: boolean

    WorkHours:
      type: object
      properties:
        severaWorkHoursId:
          type: string
        user:
          type: object
          description: A reference to User Model in WorkHours Object
          properties:
            severaUserId:
              type: string
              description: Id of the user
            name:
              type: string
              description: Name of the user        
        project:
          type: object
          description: A reference to Project Model in WorkHours Object
          properties:
            severaProjectId:
              type: string
              description: Id of the project
            name:
              type: string
              description: Name of the project
            isClosed:
              type: boolean
              default: false
              description: Boolean value to indicate if the project has been closed or not
        phase:
          type: object
          description: A reference to Phase Model in WorkHours Object
          properties:
            severaPhaseId:
              type: string
              description: Id of the phase
            name:
              type: string
              description: Name of the phase
        description:
          type: string
        quantity:
          type: number
          format: double